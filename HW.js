function delay(ms) {
  return new Promise((resolve) => {
    setTimeout(resolve, ms);
  });
}

delay(1000).then(() => {
  console.log("Hello, world!");
});


let promise = new Promise(function(resolve, reject) {
    resolve(1);
  
    setTimeout(() => resolve(2), 1000);
  });
  
  promise.then(alert);
//В этом коде будет выведено 1, так как функция resolve(1) будет вызвана сразу при создании промиса, и обещание будет немедленно выполнено с результатом 1.
//Функция setTimeout с вызовом resolve(2) не будет выполнена, потому что только первый вызов resolve() имеет эффект, а все последующие вызовы будут проигнорированы.
//Поэтому функция, переданная в .then(), будет вызвана с аргументом 1, и выведет число 1 в консоль.


//Cравните then и catch

//Являются ли фрагменты кода ниже эквивалентными? Другими словами, ведут ли они себя одинаково во всех обстоятельствах, для всех переданных им обработчиков?

//ОТВЕТ:Нет, эти фрагменты кода не являются эквивалентными